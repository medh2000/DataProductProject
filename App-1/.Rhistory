m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean,getmean = getmean)
}
a<- makeVector(c(1,2,3))
a
b<- makeVector(1:5)
b
class(b)
class(a)
b
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a
a$get()
v <- makeVector(c(1,2,3))
v$get()
v$set(c(5,6,7))
v$set()
v$set(c(5,6,7))
v$get()
a$get()
b$get()
v$getmean()
v$setmean()
v$setmean(mean)
mean
sum
sd
v$setmean(sum)
v$getmean()
v$setmean(mean)
v$getmean()
v$get()
a <- makeVector(c(1,2,3))
a
a$getmean()
a$setmean(mean)
a$getmean()
a
a$get()
a$getmean()
n<-a$getmean()
n
a$get()
mean(a$get())
b <- cachemean(a)
b <- cachemean(a)
a$getmean()
a$getmean()
b <- cachemean(a)
b
b
b <- cachemean(a)
b
b <- cachemean(c(1:10))
b <- cachemean(c[1:10])
b <- cachemean(c[1,10])
b <- cachemean(c(1,10))
c(1,10)
c(1:10)
b <- cachemean(c(1:10))
a
a <- makeVector(c(1,2,3))
a
a$set(c(4,5,6))
a$get()
b <- cachemean(a)
b
b
b <- cachemean(a)
b
b
class(a)
c<-matrix(1:4,2,2)
c
class(c)
matrix
mat
?inverse
?solve
?matrix
a <- makeCacheMatrix(matrix(1:4,2))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(mat) {
x <<- mat
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(inverse) m <<- mat
getInverseMatrix <- function() m
list(set = set, get = get, setInverseMatrix = setInverseMatrix,getInverseMatrix = getInverseMatrix)
}
a <- makeCacheMatrix(matrix(1:4,2))
a
c <- matrix(1:4,2))
c <- matrix(1:4,2)
c
1/c
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(mat) {
x <<- mat
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(inverse) m <<- inverse
getInverseMatrix <- function() m
list(set = set, get = get, setInverseMatrix = setInverseMatrix,getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x, ...) {
mat <- x$getInverseMatrix()
if(!is.null(mat)) {
message("getting cached data")
return(mat)
}
data <- x$get()
mat <- solve(data, ...)
x$setInverseMatrix(mat)
mat
}
a <- makeCacheMatrix(matrix(1:4,2))
a
a$get()
a$getInverMatrix()
a$getInverseMatrix()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
a$getInverseMatrix()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(inverse) m <<- inverse
getInverseMatrix <- function() m
list(set = set, get = get, setInverseMatrix = setInverseMatrix,getInverseMatrix = getInverseMatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverseMatrix(m)
m
}
a <- makeCacheMatrix(matrix(1:4,2))
a
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$getInverse()
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
save.image("C:\\Users\\mohassan\\Documents\\RMIT15.071x\\Rclass\\.RData")
q()
save.image("~/RMIT15.071x/.RData")
getwd()
read.csv("Book1.csv")
imd <- read.csv("Book1.csv")
str(imd)
imd <- read.csv("Book1.csv", stringsAsFactorFalse=T)
imd <- read.csv("Book1.csv", stringsAsFactorsFalse=T)
str(imd)
table(imd$MajorIncidentTicketNumber)
head(imd)
table(imd$IMID)
table(imd$MajorIncidentTicketNumber)
unique(imd$MajorIncidentTicketNumber))
unique(imd$MajorIncidentTicketNumber)
imd <- read.csv("Book1.csv",  stringsAsFactors = FALSE)
str(imd)
unique(imd$MajorIncidentTicketNumber)
table(imd$MajorIncidentTicketNumber)
as.matrix(table(imd$MajorIncidentTicketNumber))
View(as.matrix(table(imd$MajorIncidentTicketNumber)))
mi <- read.csv("miticket.csv",  stringsAsFactors = FALSE)
str(mi)
View(mi)
mi <- read.csv("miticket.csv",  stringsAsFactors = FALSE)
str(mi)
summary(mi)
str(mi)
mi <- read.csv("Book5.csv",  stringsAsFactors = FALSE)
str(mi)
head(mi)
mi(colNames) <- "id"
colNames
mi(names) <- "id"
?cols
?colsnames
?colsname
?colnames
mi(colnames) <- "id"
colnames(mi)<- "id"
mi
head(mi)
table(mi$id)
as.matrix(table(mi$id))
unique(mi$id)
mi
View(mi)
View(as.matrix(table(mi$id)))
df < data.frame(x=c(11:16),y=c(10,9,11,14,10,6) )
df < data.frame(x=c11:16,y=c(10,9,11,14,10,6) )
df < data.frame(x = 11:16,y=c(10,9,11,14,10,6) )
df < as.data.frame(x = 11:16,y=c(10,9,11,14,10,6) )
as.data.frame(x = 11:16,y=c(10,9,11,14,10,6) )
as.data.frame(x = 11:16,y=c(10,9,11,14,10,6) )
11:16
x<-11:16
x
y=c(10,9,11,14,10,6)
x
y
data.frame("x" = x, "y"=y)
df <-data.frame("x" = x, "y"=y)
df
summary(df)
60/6
df <- data.frame(
color = c("blue", "black", "blue", "blue", "black"),
value = 1:5)
df
subset(df, df$color == blue)
subset(df, df$color == 'blue')
split(df$color == 'blue')
?split
split(df, as.factor(df$color))
dfs <- split(df, as.factor(df$color))
dfs
dfs[1]
dfs[2]
summary(df[1])
dfs[1,1]
dfs[1,]
dfs$blue
dfs$blue[1]
dfs$blue[1,]
dfs$blue[1,2]
dfs
boxplot(dfs)
boxplot(dfs$blue)
boxplot(dfs[1])
boxplot(dfs$blue[1])
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
lst <- list(numbers = 1:10, letters = letters, boolean = c(TRUE, FALSE))
lst
lst$numbers
lst[[1]]
lst[1]
lst
lst[1]
lst[[1]]
library(twitterR)
install.packages("twitterR")
version
rexp(40,0.2)
?rexp
plot(rexp(40,0.2))
plot(rexp(40,0.2), type="l")
hist(rexp(40,0.2))
library(UsingR)
library("UsingR")
install.packages("UsingR")
library(UsingR)
par(mfrow=c(1,2))
data(galton)
hist(galton$shild, col="blue")
hist(galton$shild, col="blue", breaks=100)
str(galton)
hist(galton$child, col="blue", breaks=100)
hist(galton$child, col="blue")
hist(galton$child, col="blue")
hist(galton$child, col="blue")
hist(galton$child, col="blue", breaks=100)
hist(galton$child, col="blue", breaks=100)
hist(galton$parent, col="blue", breaks=100)
par(mfrow=c(1,2))
hist(galton$parent, col="blue", breaks=100)
hist(galton$child, col="blue", breaks=100)
library(shnyR)
library((shiny)
)
library(shiny)
getwd()
setwd("classes")
setwd("Coursera")
setwd("RshinyProject")
getwd()
ls
ls()
dir()
runApp(App-1)
runApp("App-1")
getwd()
ls
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
data(galton)
library(UsingR)
data(galton)
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
data()
View(data())
View("data()")
data(blood)
blood
str(blood)
hist(blood)
data(cancer)
str(cancer)
cancer
sumamry(cancer)
summary(cancer)
head(cancer)
str(cancer)
hist(cancer$stomach)
plot(cancer$stomach)
plot(cancer)
plot(cancer$stomach, cancer$colon)
hist(cancer$stomach)
cancer$stomach
summary(cancer$stomach)
chips
emissions
plot(emissions$GDP)
hist(emissions$GDP)
hist(emissions$CO2)
gasprices
hist(gasprices)
str(gasprices)
plot(gasprices)
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
gasprices
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
10/9
gasprice(3.85)
function(gasprice) gasprice*prob
gasprice(3.85)
gasPrices <- function(gasprice) gasprice*prob
gasPrices(3.85)
pro <- 10/9
prob <- 10/9
gasPrices(3.85)
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
gasprices
plot(gasprices)
line()
?plot
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
plot(gasprices)
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
plot(gasprices)
abline(lm(gasprices), col="red") # regression line (y~x)
mtcars
abline(lm(gasprices), col="red") # regression line (y~x)
line((gasprices), col="red")
line(gasprices)
abline(lm(gasprices), col="red") # regression line (y~x)
abline(lm(gasprices), col="red") # regression line (y~x)
str(gasprices)
abline(lm(gasprices$Time-Series), col="red") # regression line (y~x)
lm(mpg~wt, data =mtcars)
abline(lm(mpg~wt), col="red") # regression line (y~x)
plot(wt, mpg, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(mtcars$wt, mtcars$mpg, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
abline(lm(mpg~wt), col="red") # regression line (y~x)
abline(lm(mpg~wt), col="red") # regression line (y~x)
attach(mtcars)
abline(lm(mpg~wt), col="red") # regression line (y~x)
lines(lowess(wt,mpg), col="blue") # lowess line (x,y)
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
lm(mpg~wt, data =mtcars)
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
lm(mpg~wt, data =mtcars)
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
title: "Analysis"
output: pdf_document
<html>
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
shiny::runApp('~/classes/Coursera/RShinyProject/App-1')
